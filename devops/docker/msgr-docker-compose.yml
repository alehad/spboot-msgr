version: '3.5'

networks: 
  alehad_net:
    name: alehad_net

services:
  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    networks: 
      - alehad_net
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    networks: 
      - alehad_net
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # I made mongo depend on kafka/zookeper just so those get initialized fully before initializing mongo
  mongodb:
    container_name: docker-mongo
    image: mongo
    ports:
     - "27017:27017"
    volumes:
     - mongo-data:/data/db
    networks: 
      - alehad_net
    depends_on:
      - zookeeper
      - kafka

  # mongo express is not required for running msgr but useful to inspect data stored in mongo
  mongo-express:
    container_name: docker-mongo-express
    image: mongo-express
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_PORT=27017
    ports:
     - "8082:8081"
    networks: 
      - alehad_net
    depends_on:
     - mongodb

  # Elasticsearch Docker Images: https://www.docker.elastic.co/
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2
    container_name: docker-elasticsearch
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300

  kibana:
    container_name: docker-kibana
    image: docker.elastic.co/kibana/kibana:7.6.2
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch

  # made redis depend on kafka, just to ensure orderly initialization of images, no actual dependancy
  redis:
    image: docker.io/bitnami/redis:7.0
    environment:
      # ALLOW_EMPTY_PASSWORD is recommended only for development.
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    ports:
      - '6379:6379'
    volumes:
      - 'redis_data:/bitnami/redis/data'
    depends_on:
     - kafka

  msgr:
    container_name: docker-msgr
    image: alehad/msgr
    ports:
     - "80:8088"
     - "8080:8088"
    networks: 
      - alehad_net
    depends_on:
      - zookeeper
      - kafka
      - mongodb
      - elasticsearch
      - kibana
	  - redis

volumes:
  elasticsearch-data:
    driver: local
  mongo-data:
    driver: local
  redis_data:
    driver: local